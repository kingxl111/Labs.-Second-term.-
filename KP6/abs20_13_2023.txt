r+ - окрываем файл, не затирая его. Также можем писать
w+ - затираем файл, можем считывать
a+ - append 

FILE* fopen("path", "mode");
void fclose(FILE*);
count fread(void*, size_of_element, max_n, FILE*); //Возвращает количество элементов, которые смогла считать
count fwrite(void*, size_of_element, max_n, FILE*); //Возвращает количество элементов, которые смогла записать

fscanf();
fprintf();
fseek(); //Перематывает ленту 

В теории рассказать про файловый дескриптор и про файловый ввод/вывод в Си!!!


Можно взять интересную предметную область, и составить по ней табличку по различным параметрам


Написать две программы:

1)Первая берет набор текстовых данных, запихивает его в бинарный файл
Получает исходный файл и целевой файл

2) Читает бинарный файл


Напишем первую программку

typedef struct
{
    char os_name[64];
    char proc[16];
    int ram;
    int ssd;
} comp;


int main(int argc, char* argv[])
{
    if(argc != 3) //Нам нужно 2 аргумента, но нулевой(саму программу) Си тоже считывает
    {
        fprintf(stderr, "...");
        return 1;
    }
    FILE* input = fopen(argv[1], "r"); //Чтобы избежать проблем с кодировками, пишем "rb"
    FILE* output = fopen(argv[2], "w"); 

    if(input == NULL || otput == NULL) //error
    {
        fprintf(stderr, "...");
        return 1;
    }
    
    comp c;
    while(fscanf(input, "%[^;]%[^;];%d;%d", &c.os_name, &c.proc, &c.ram, &c.))  //[^;] - считывание до того, как встретим ;
    {
        fwrite(&c, sizeof(comp), 1, output);
        //Тут еще проверка на ошибку
    }

    flose(input);
    fclose(output);


    return 0;
}



Задание:

1) Выбрать область
2) Нетривиальное задание
(с fseek, с группировкой, с фильтрацией)
3) С аргументами(обязательными и необязательными)

